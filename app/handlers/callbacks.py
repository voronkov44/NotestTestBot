from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from app.states import Task
from app.database import get_task_by_id, mark_task_as_done, delete_task_from_db, update_task_in_db, \
    mark_task_as_actualize, get_user_tasks, get_user_tasks_completed
from app.keyboards import inline as kb_inline

router = Router()

@router.callback_query(F.data.startswith("completed_task_"))
async def show_completed_task_details(callback: CallbackQuery):
    completed_task_id = int(callback.data.split("_")[2])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å 2
    task = await get_task_by_id(completed_task_id)

    if not task:
        await callback.answer("–û—à–∏–±–∫–∞: –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    task_text = task["task_text"] if task["task_text"] else "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏ ü§∑‚Äç‚ôÄÔ∏è"
    keyboard = kb_inline.get_completed_task_control_buttons(completed_task_id)

    await callback.message.edit_text(
        f"üìå <b>{task['task_name']}</b>\n\n{task_text}",
        parse_mode="HTML", reply_markup=keyboard
    )

@router.callback_query(F.data == "back_to_list_completed_task")
async def back_to_completed_task_list(callback: CallbackQuery):
    user_tg = callback.from_user.id
    tasks = await get_user_tasks_completed(user_tg)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_user_tasks_completed

    if not tasks:
        await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")
        return

    await callback.message.edit_text("–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:", reply_markup=kb_inline.completedTasks_keyboard(tasks))

@router.callback_query(F.data.startswith("actualize_"))
async def mark_task_actualize(callback: CallbackQuery):
    completed_task_id = int(callback.data.split("_")[1])
    success = await mark_task_as_actualize(completed_task_id)

    if success:
        await callback.answer("üîÑ –ó–∞–¥–∞—á–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è!")
        user_tg = callback.from_user.id
        tasks = await get_user_tasks_completed(user_tg)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_user_tasks_completed

        if not tasks:
            await callback.message.edit_text("üîÑ –ó–∞–¥–∞—á–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞!\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")
        else:
            await callback.message.edit_text(
                "üîÑ –ó–∞–¥–∞—á–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞!\n–í–æ—Ç –≤–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫:",
                reply_markup=kb_inline.completedTasks_keyboard(tasks)
            )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!", show_alert=True)

@router.callback_query(F.data.startswith("delete_actualize_"))
async def delete_actualize_task(callback: CallbackQuery):
    completed_task_id = int(callback.data.split("_")[2])
    success = await delete_task_from_db(completed_task_id)

    if success:
        await callback.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
        await callback.message.delete()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!", show_alert=True)
        return

    user_tg = callback.from_user.id
    tasks = await get_user_tasks_completed(user_tg)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_user_tasks_completed

    if not tasks:
        await callback.message.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")
    else:
        await callback.message.answer("üìã –í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:", reply_markup=kb_inline.completedTasks_keyboard(tasks))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–¥–∞—á
@router.callback_query(F.data.startswith("task_"))
async def show_task_details(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    task = await get_task_by_id(task_id)

    if not task:
        await callback.answer("–û—à–∏–±–∫–∞: –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    task_text = task["task_text"] if task["task_text"] else "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏ ü§∑‚Äç‚ôÄÔ∏è"
    keyboard = kb_inline.get_task_control_buttons(task_id)

    await callback.message.edit_text(
        f"üìå <b>{task['task_name']}</b>\n\n{task_text}",
        parse_mode="HTML", reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("done_"))
async def mark_task_done(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    success = await mark_task_as_done(task_id)

    if success:
        await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        user_tg = callback.from_user.id
        tasks = await get_user_tasks(user_tg)

        if not tasks:
            await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")
        else:
            await callback.message.edit_text(
                "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n–í–æ—Ç –≤–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫:",
                reply_markup=kb_inline.allTasks_keyboard(tasks)
            )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!", show_alert=True)

@router.callback_query(F.data.startswith("delete_"))
async def delete_task(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    success = await delete_task_from_db(task_id)

    if success:
        await callback.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
        await callback.message.delete()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!", show_alert=True)
        return

    user_tg = callback.from_user.id
    tasks = await get_user_tasks(user_tg)

    if not tasks:
        await callback.message.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")
    else:
        await callback.message.answer("üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:", reply_markup=kb_inline.allTasks_keyboard(tasks))

@router.callback_query(F.data == "back_to_list_task")
async def back_to_task_list(callback: CallbackQuery):
    user_tg = callback.from_user.id
    tasks = await get_user_tasks(user_tg)

    if not tasks:
        await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")
        return

    await callback.message.edit_text("–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:", reply_markup=kb_inline.allTasks_keyboard(tasks))

@router.callback_query(F.data.startswith("edit_"))
async def edit_task_callback(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[1])
    await state.update_data(task_id=task_id, action="edit")
    await state.set_state(Task.name)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer()