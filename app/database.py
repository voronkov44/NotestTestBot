from __future__ import annotations
from aiomysql import Pool

import aiomysql
import logging
from typing import List, Optional, Any

pool: Pool | None = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π


async def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    global pool
    try:
        logging.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        pool = await aiomysql.create_pool(
            host="",
            user="",
            password="",
            db="",
            minsize=1,
            maxsize=10,
            autocommit=True
        )
        logging.info("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î —Å–æ–∑–¥–∞–Ω!")
        logging.info(f"–ü—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {pool}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
        raise e


async def close_db():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    global pool
    if pool:
        try:
            pool.close()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
            await pool.wait_closed()
            logging.info("üõë –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –∑–∞–∫—Ä—ã—Ç!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
    else:
        logging.error("‚õî –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å.")


async def get_db_connection():
    """–ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global pool
    if not pool:
        logging.error("‚õî –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return None
    if not isinstance(pool, aiomysql.pool.Pool):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        logging.error("‚õî pool –±—ã–ª –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Pool!")
        return None
    try:
        logging.info(f"üîÑ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {pool.size} –∏–∑ {pool.maxsize}")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        async with pool.acquire() as connection:
            return connection
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞: {e}")
        return None


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def save_user_to_db(user_tg: int, username: str | None, first_name: str, last_name: str | None):
    connection = await get_db_connection()
    if not connection:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        async with connection.cursor() as cursor:
            await cursor.execute("SELECT id FROM users WHERE user_tg = %s", (user_tg,))
            user = await cursor.fetchone()

            if user is None:
                sql = "INSERT INTO users (user_tg, username, first_name, last_name) VALUES (%s, %s, %s, %s)"
                values = (user_tg, username, first_name, last_name)
                await cursor.execute(sql, values)
                await connection.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_task_to_db(task_name: str, task_text: str | None, user_tg: int):
    connection = await get_db_connection()
    if not connection:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        async with connection.cursor() as cursor:
            await cursor.execute("SELECT id FROM users WHERE user_tg = %s", (user_tg,))
            user = await cursor.fetchone()

            if user:
                user_id = user[0]
            else:
                logging.error(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {user_tg} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            sql = "INSERT INTO tasks (user_id, task_name, task_text) VALUES (%s, %s, %s)"
            values = (user_id, task_name, task_text)
            await cursor.execute(sql, values)
            await connection.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def update_task_in_db(task_id: int, task_name: str, task_text: str | None) -> bool:
    connection = await get_db_connection()
    if not connection:
        return False

    try:
        async with connection.cursor() as cursor:
            await cursor.execute(
                "UPDATE tasks SET task_name = %s, task_text = %s WHERE id = %s",
                (task_name, task_text, task_id)
            )
            await connection.commit()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return False


async def get_user_tasks(user_tg: int) -> Optional[List[dict]]:
    connection = await get_db_connection()
    if not connection:
        return None
    try:
        async with connection.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute("SELECT id FROM users WHERE user_tg = %s", (user_tg,))
            user = await cursor.fetchone()
            if not user:
                return None
            user_id = user["id"]
            await cursor.execute("SELECT id, task_name FROM tasks WHERE user_id = %s AND is_done = 0", (user_id,))
            tasks = await cursor.fetchall()
        return tasks
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_user_tasks_completed(user_tg: int) -> Optional[List[dict]]:
    connection = await get_db_connection()
    if not connection:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return None

    try:
        async with connection.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute("SELECT id FROM users WHERE user_tg = %s", (user_tg,))
            user = await cursor.fetchone()

            if not user:
                return None

            user_id = user["id"]

            await cursor.execute(
                "SELECT id, task_name FROM tasks WHERE user_id = %s AND is_done = 1",
                (user_id,)
            )
            tasks = await cursor.fetchall()

        return tasks
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id {user_tg}: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –ø–æ ID
async def get_task_by_id(task_id: int) -> Any | None:
    connection = await get_db_connection()
    if not connection:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return None

    try:
        async with connection.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute("SELECT task_name, task_text FROM tasks WHERE id = %s", (task_id,))
            task = await cursor.fetchone()

        return task
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Å id {task_id}: {e}")
        return None


#–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç —Ç–∞—Å–∫—É —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—É—é, –∑–∞–º–µ–Ω—è–µ—Ç 0 –Ω–∞ 1
async def mark_task_as_done(task_id: int) -> bool:
    connection = await get_db_connection()
    if not connection:
        return False
    try:
        async with connection.cursor() as cursor:
            await cursor.execute("UPDATE tasks SET is_done = 1 WHERE id = %s", (task_id,))
            await connection.commit()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç —Ç–∞—Å–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ tasks
async def delete_task_from_db(task_id: int) -> bool:
    connection = await get_db_connection()
    if not connection:
        return False

    try:
        async with connection.cursor() as cursor:
            await cursor.execute("DELETE FROM tasks WHERE id = %s", (task_id,))
            await connection.commit()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return False


#–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç —Ç–∞—Å–∫—É —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é, –∑–∞–º–µ–Ω—è–µ—Ç 1 –Ω–∞ 0
async def mark_task_as_actualize(task_id: int) -> bool:
    connection = await get_db_connection()
    if not connection:
        return False
    try:
        async with connection.cursor() as cursor:
            await cursor.execute("UPDATE tasks SET is_done = 0 WHERE id = %s", (task_id,))
            await connection.commit()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return False

########